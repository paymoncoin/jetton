#pragma version =0.4.6;
#pragma allow-post-modification;
#pragma compute-asm-ltr;

;; tact_JettonWallet.headers.fc
;;
;; Header files for JettonWallet
;; NOTE: declarations are sorted for optimal order
;;

;; __tact_load_address_opt
(slice, slice) __tact_load_address_opt(slice cs) inline;

;; __tact_store_address_opt
builder __tact_store_address_opt(builder b, slice address) inline;

;; __tact_not_null
forall X -> X __tact_not_null(X x) impure inline;

;; __tact_context_get
(int, slice, int, slice) __tact_context_get() inline;

;; __tact_context_get_sender
slice __tact_context_get_sender() inline;

;; $JettonTransfer$_load_without_opcode
(slice, ((int, int, slice, slice, cell, int, slice))) $JettonTransfer$_load_without_opcode(slice sc_0) inline;

;; $JettonTransferInternal$_store
builder $JettonTransferInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline;

;; $JettonTransferInternal$_store_cell
cell $JettonTransferInternal$_store_cell((int, int, slice, slice, int, slice) v) inline;

;; $JettonTransferInternal$_load_without_opcode
(slice, ((int, int, slice, slice, int, slice))) $JettonTransferInternal$_load_without_opcode(slice sc_0) inline;

;; $JettonTransferInternal$_load_bounced
(slice, ((int, int))) $JettonTransferInternal$_load_bounced(slice sc_0) inline;

;; $JettonNotification$_store
builder $JettonNotification$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $JettonNotification$_store_cell
cell $JettonNotification$_store_cell((int, int, slice, slice) v) inline;

;; $JettonBurn$_load_without_opcode
(slice, ((int, int, slice, cell))) $JettonBurn$_load_without_opcode(slice sc_0) inline;

;; $JettonBurnNotification$_store
builder $JettonBurnNotification$_store(builder build_0, (int, int, slice, slice) v) inline;

;; $JettonBurnNotification$_store_cell
cell $JettonBurnNotification$_store_cell((int, int, slice, slice) v) inline;

;; $JettonBurnNotification$_load_bounced
(slice, ((int, int))) $JettonBurnNotification$_load_bounced(slice sc_0) inline;

;; $JettonExcesses$_store
builder $JettonExcesses$_store(builder build_0, (int) v) inline;

;; $JettonExcesses$_store_cell
cell $JettonExcesses$_store_cell((int) v) inline;

;; $ProvideWalletBalance$_load_without_opcode
(slice, ((slice, int))) $ProvideWalletBalance$_load_without_opcode(slice sc_0) inline;

;; $VerifyInfo$_store
builder $VerifyInfo$_store(builder build_0, (slice, slice, cell) v) inline;

;; $VerifyInfo$_not_null
((slice, slice, cell)) $VerifyInfo$_not_null(tuple v) inline;

;; $TakeWalletBalance$_store
builder $TakeWalletBalance$_store(builder build_0, (int, tuple) v) inline;

;; $TakeWalletBalance$_store_cell
cell $TakeWalletBalance$_store_cell((int, tuple) v) inline;

;; $ClaimTON$_load_without_opcode
(slice, ((slice))) $ClaimTON$_load_without_opcode(slice sc_0) inline;

;; $JettonWallet$_store
builder $JettonWallet$_store(builder build_0, (slice, slice, int) v) inline;

;; $JettonWallet$_load
(slice, ((slice, slice, int))) $JettonWallet$_load(slice sc_0) inline;

;; $StdAddress$_get_address
_ $StdAddress$_get_address((int, int) v) inline;

;; $JettonWalletData$_to_external
(int, slice, slice, cell) $JettonWalletData$_to_external(((int, slice, slice, cell)) v) inline;

;; $VerifyInfo$_as_optional
tuple $VerifyInfo$_as_optional((slice, slice, cell) v) inline;

;; $JettonWallet$init$_store
builder $JettonWallet$init$_store(builder build_0, (slice, slice, int) v) inline;

;; $JettonWallet$_contract_load
(slice, slice, int) $JettonWallet$_contract_load() impure inline;

;; $JettonWallet$_contract_store
() $JettonWallet$_contract_store((slice, slice, int) v) impure inline;

;; $BasechainAddress$_constructor_hash
((int)) $BasechainAddress$_constructor_hash(int $hash) inline;

;; $global_newBasechainAddress
(int) $global_newBasechainAddress(int $hash) impure inline;

;; $global_contractBasechainAddress
(int) $global_contractBasechainAddress((cell, cell) $s) impure inline;

;; $StateInit$_fun_hasSameBasechainAddress
int $StateInit$_fun_hasSameBasechainAddress((cell, cell) $self, slice $address) impure inline;

;; $JettonWallet$_init_child
(cell, cell) $JettonWallet$_init_child(slice $owner, slice $minter, int $balance) inline;

;; $JettonWalletData$_constructor_balance_owner_minter_code
((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_owner_minter_code(int $balance, slice $owner, slice $minter, cell $code) inline;

;; $JettonWallet$_fun_get_wallet_data
((slice, slice, int), (int, slice, slice, cell)) $JettonWallet$_fun_get_wallet_data((slice, slice, int) $self) impure inline_ref;

;; $DeployParameters$_constructor_value_mode_bounce_body_init
((int, cell, int, int, (cell, cell))) $DeployParameters$_constructor_value_mode_bounce_body_init(int $value, int $mode, int $bounce, cell $body, (cell, cell) $init) inline;

;; $JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload
((int, int, slice, slice, int, slice)) $JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload(int $queryId, int $amount, slice $sender, slice $responseDestination, int $forwardTonAmount, slice $forwardPayload) inline;

;; $MessageParameters$_constructor_to_value_mode_bounce_body
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline;

;; $JettonNotification$_constructor_queryId_amount_sender_forwardPayload
((int, int, slice, slice)) $JettonNotification$_constructor_queryId_amount_sender_forwardPayload(int $queryId, int $amount, slice $sender, slice $forwardPayload) inline;

;; $JettonExcesses$_constructor_queryId
((int)) $JettonExcesses$_constructor_queryId(int $queryId) inline;

;; $VerifyInfo$_constructor_minter_owner_code
((slice, slice, cell)) $VerifyInfo$_constructor_minter_owner_code(slice $minter, slice $owner, cell $code) inline;

;; $MessageParameters$_constructor_body_to_value_mode
((int, cell, int, slice, int)) $MessageParameters$_constructor_body_to_value_mode(cell $body, slice $to, int $value, int $mode) inline;

;; $TakeWalletBalance$_constructor_balance_verifyInfo
((int, tuple)) $TakeWalletBalance$_constructor_balance_verifyInfo(int $balance, tuple $verifyInfo) inline;

;; $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination
((int, int, slice, slice)) $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination(int $queryId, int $amount, slice $sender, slice $responseDestination) inline;

;; $MessageParameters$_constructor_to_value_mode
((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline;


;; tact_JettonWallet.stdlib.fc
global (int, slice, int, slice) __tact_context;
global slice __tact_context_sender;
global cell __tact_child_contract_codes;
global int __tact_randomized;

(slice, slice) __tact_load_address_opt(slice cs) inline {
    if (cs.preload_uint(2) != 0) {
        slice raw = cs~load_msg_addr();
        return (cs, raw);
    } else {
        cs~skip_bits(2);
        return (cs, null());
    }
}

builder __tact_store_addr_none(builder b) asm "b{00} STSLICECONST";

builder __tact_store_address_opt(builder b, slice address) inline {
    if (null?(address)) {
        return __tact_store_addr_none(b);
    } else {
        return b.store_slice(address);
    }
}

forall X -> X __tact_not_null(X x) impure inline {
    throw_if(128, null?(x)); return x;
}

(int, slice, int, slice) __tact_context_get() inline {
    return __tact_context;
}

slice __tact_context_get_sender() inline {
    return __tact_context_sender;
}

forall X0, X1, X2 -> tuple __tact_tuple_create_3((X0, X1, X2) v) asm """
    3 TUPLE
""";

forall X0, X1, X2 -> (X0, X1, X2) __tact_tuple_destroy_3(tuple v) asm """
    3 UNTUPLE
""";

int $global_max(int $x, int $y) impure asm """
    MAX
""";

int $global_sign(int $x) impure asm """
    SGN
""";

int $global_contractHash(cell $code, cell $data) impure asm """
    s0 PUSH HASHCU // `data` hash
    s2 PUSH HASHCU // `code` hash
    SWAP2
    CDEPTH         // `data` depth
    SWAP
    CDEPTH         // `code` depth
    131380 INT     // (2 << 16) | (1 << 8) | 0x34

    // Group 2: Composition of the Builder
    NEWC
    24 STU  // store refs_descriptor | bits_descriptor | data
    16 STU  // store depth_descriptor for `code`
    16 STU  // store depth_descriptor for `data`
    256 STU // store `code` hash
    256 STU // store `data` hash

    // Group 3: SHA256 hash of the resulting Builder
    ONE HASHEXT_SHA256
""";

int $global_myBalance() impure asm """
    BALANCE FIRST
""";

int $global_getComputeFee(int $gasUsed, int $isMasterchain) impure asm """
    GETGASFEE
""";

cell $global_myCode() impure asm """
    MYCODE
""";

() $global_nativeReserve(int $amount, int $mode) impure asm """
    RAWRESERVE
""";

() $global_message((int, cell, int, slice, int) $params) impure asm """
    NEWC
    b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
    1 STI               // store `bounce`
    b{000} STSLICECONST // store bounced = false and src = addr_none
    STSLICE             // store `to`
    SWAP
    STGRAMS             // store `value`
    106 PUSHINT         // 1 + 4 + 4 + 64 + 32 + 1
    STZEROES
    // â†’ Stack state
    // s0: Builder
    // s1: `body`
    // s2: `mode`
    STDICT
    ENDC
    SWAP
    SENDRAWMSG
""";

() $global_deploy((int, cell, int, int, (cell, cell)) $params) impure asm """
    4 1 BLKPUSH // pushes 2 copies of `init.code` and `init.data`
    HASHCU // `init.data` hash
    SWAP
    HASHCU // `init.code` hash
    SWAP2
    CDEPTH // `init.data` depth
    SWAP
    CDEPTH // `init.code` depth

    // Group 2: Calculating destination address
    // For almost identical logic and instructions,
    // see comments inside `contractHash()` function in contract.tact
    131380 INT // (2 << 16) | (1 << 8) | 0x34
    NEWC
    24 STU
    16 STU
    16 STU
    256 STU
    256 STU
    ONE HASHEXT_SHA256 // obtains hash part (account id) of the address
    // â†’ Stack state
    // s0: destAddr(hash part)
    // s1: `init.data`
    // s2: `init.code`
    // s3 and below: `bounce`, `value`, `body`, `mode`

    // Group 3: Building a message (CommonMsgInfoRelaxed)
    s3 XCHG0           // swaps `bounce` with destAddr(hash part)
    NEWC
    b{01} STSLICECONST // store tag = $0 and ihr_disabled = true
    1 STI              // store `bounce`
    s1 s2 XCHG         // swap `init.data` with `init.code`, placing code on s1
    STREF              // store `init.code`
    STREF              // store `init.data`
    // Inline StateInit:
    b{00010000000000} STSLICECONST
    // 0 + 00 + 10 + 0 + 00000000
    // 1) 0 - bounced = false
    // 2) 00 - src = addr_none
    // 3) 10 - tag of addr_std (part of dest)
    // 4) 0 - Maybe Anycast = false
    // 5) 00000000 - workchain_id (part of dest)
    //
    256 STU     // store destAddr(hash part)
    SWAP        // Builder on top, `value` below
    STGRAMS     // store `value`
    105 PUSHINT // 1 + 4 + 4 + 64 + 32
    STZEROES    // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at

    // Group 4: Continue building a message (CommonMsgInfoRelaxed into MessageRelaxed)
    // Remaining bits of MessageRelaxed:
    b{1000110} STSLICECONST
    // 10 + 0 + 0 + 1 + 1 + 0
    // 10 - Maybe (Either StateInit ^StateInit) = true false
    // 0 - split_depth:(Maybe (## 5)) = false
    // 0 = special:(Maybe TickTock) = false
    // 1 = code:(Maybe ^Cell) = true
    // 1 = data:(Maybe ^Cell) = true
    // 0 = library:(Maybe ^Cell) = false
    //
    STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
    ENDC   // finalize the message
    // â†’ Stack state
    // s0: Cell
    // s1: params.`mode`

    // Group 5: Sending the message, with `mode` on top
    SWAP
    SENDRAWMSG
""";

(int, int) $global_parseStdAddress(slice $slice) impure asm """
    REWRITESTDADDR
""";

(int) $global_newBasechainAddress(int $hash) impure inline {
    return $BasechainAddress$_constructor_hash($hash);
}

(int) $global_contractBasechainAddress((cell, cell) $s) impure inline {
    var (($s'code, $s'data)) = $s;
    int $hash = $global_contractHash($s'code, $s'data);
    return $global_newBasechainAddress($hash);
}

() $global_forceBasechain(slice $address) impure asm """
    REWRITESTDADDR DROP 138 THROWIF
""";

slice $Address$_fun_asSlice(slice $self) impure asm "NOP";

int $StateInit$_fun_hasSameBasechainAddress((cell, cell) $self, slice $address) impure inline {
    var (($self'code, $self'data)) = $self;
    var (($self'code, $self'data)) = $self;
    int $addressHash = $StdAddress$_get_address($global_parseStdAddress($Address$_fun_asSlice($address)));
    var ($baseAddress'hash) = $global_contractBasechainAddress(($self'code, $self'data));
    return (__tact_not_null($baseAddress'hash) == $addressHash);
}

int $Context$_fun_readForwardFee((int, slice, int, slice) $self) impure asm """
    LDMSGADDR   // load dest:MsgAddressInt
    LDGRAMS     // load value:CurrencyCollection
    ONE
    SDSKIPFIRST // skip extra currency collection
    LDGRAMS     // load ihr_fee
    LDGRAMS     // load fwd_fee, we'll be using this!
    DROP        // drop remaining Slice (with created_lt and created_at)

    // There are 7 entries on the stack â€” first 3 fields of Context plus 4 loaded ones.
    // The topmost is fwd_fee, which is the only one we're after, so let's drop 6 entries below:
    6 1 BLKDROP2 // drop the loaded values as well as the first 3 fields of Context

    ZERO              // not masterchain
    GETORIGINALFWDFEE // floor(fwd_fee * 2^16 / (2^16 - first_frac)), where
                      // first_frac is a value listed in config param 25
                      // of the blockchain: https://tonviewer.com/config#25
                      // this instruction effectively multiplies the fwd_fee by 1.5,
                      // at least for the current value of first_frac, which is 21845
""";

;; tact_JettonWallet.storage.fc
;;
;; Type: MessageParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 to:address bounce:bool = MessageParameters
;;

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode_bounce_body(slice $to, int $value, int $mode, int $bounce, cell $body) inline {
    return ($mode, $body, $value, $to, $bounce);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_body_to_value_mode(cell $body, slice $to, int $value, int $mode) inline {
    return ($mode, $body, $value, $to, true);
}

((int, cell, int, slice, int)) $MessageParameters$_constructor_to_value_mode(slice $to, int $value, int $mode) inline {
    return ($mode, null(), $value, $to, true);
}

;;
;; Type: DeployParameters
;; TLB: _ mode:int257 body:Maybe ^cell value:int257 bounce:bool init:StateInit{code:^cell,data:^cell} = DeployParameters
;;

((int, cell, int, int, (cell, cell))) $DeployParameters$_constructor_value_mode_bounce_body_init(int $value, int $mode, int $bounce, cell $body, (cell, cell) $init) inline {
    return ($mode, $body, $value, $bounce, $init);
}

;;
;; Type: StdAddress
;; TLB: _ workchain:int8 address:uint256 = StdAddress
;;

_ $StdAddress$_get_address((int, int) v) inline {
    var (v'workchain, v'address) = v;
    return v'address;
}

;;
;; Type: BasechainAddress
;; TLB: _ hash:Maybe int257 = BasechainAddress
;;

((int)) $BasechainAddress$_constructor_hash(int $hash) inline {
    return ($hash);
}

;;
;; Type: JettonWalletData
;; TLB: _ balance:int257 owner:address minter:address code:^cell = JettonWalletData
;;

(int, slice, slice, cell) $JettonWalletData$_to_external(((int, slice, slice, cell)) v) inline {
    var (v'balance, v'owner, v'minter, v'code) = v; 
    return (v'balance, v'owner, v'minter, v'code);
}

((int, slice, slice, cell)) $JettonWalletData$_constructor_balance_owner_minter_code(int $balance, slice $owner, slice $minter, cell $code) inline {
    return ($balance, $owner, $minter, $code);
}

;;
;; Type: JettonTransfer
;; Header: 0x0f8a7ea5
;; TLB: jetton_transfer#0f8a7ea5 queryId:uint64 amount:coins destination:address responseDestination:address customPayload:Maybe ^cell forwardTonAmount:coins forwardPayload:remainder<slice> = JettonTransfer
;;

(slice, ((int, int, slice, slice, cell, int, slice))) $JettonTransfer$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    var v'destination = sc_0~load_msg_addr();
    var v'responseDestination = sc_0~__tact_load_address_opt();
    var v'customPayload = sc_0~load_maybe_ref();
    var v'forwardTonAmount = sc_0~load_varuint16();
    var v'forwardPayload = sc_0;
    return (sc_0, (v'queryId, v'amount, v'destination, v'responseDestination, v'customPayload, v'forwardTonAmount, v'forwardPayload));
}

;;
;; Type: JettonTransferInternal
;; Header: 0x178d4519
;; TLB: jetton_transfer_internal#178d4519 queryId:uint64 amount:coins sender:address responseDestination:address forwardTonAmount:coins forwardPayload:remainder<slice> = JettonTransferInternal
;;

builder $JettonTransferInternal$_store(builder build_0, (int, int, slice, slice, int, slice) v) inline {
    var (v'queryId, v'amount, v'sender, v'responseDestination, v'forwardTonAmount, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 395134233, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = __tact_store_address_opt(build_0, v'responseDestination);
    build_0 = build_0.store_varuint16(v'forwardTonAmount);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $JettonTransferInternal$_store_cell((int, int, slice, slice, int, slice) v) inline {
    return $JettonTransferInternal$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int, slice, slice, int, slice))) $JettonTransferInternal$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    var v'sender = sc_0~load_msg_addr();
    var v'responseDestination = sc_0~__tact_load_address_opt();
    var v'forwardTonAmount = sc_0~load_varuint16();
    var v'forwardPayload = sc_0;
    return (sc_0, (v'queryId, v'amount, v'sender, v'responseDestination, v'forwardTonAmount, v'forwardPayload));
}

(slice, ((int, int))) $JettonTransferInternal$_load_bounced(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'queryId, v'amount));
}

((int, int, slice, slice, int, slice)) $JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload(int $queryId, int $amount, slice $sender, slice $responseDestination, int $forwardTonAmount, slice $forwardPayload) inline {
    return ($queryId, $amount, $sender, $responseDestination, $forwardTonAmount, $forwardPayload);
}

;;
;; Type: JettonNotification
;; Header: 0x7362d09c
;; TLB: jetton_notification#7362d09c queryId:uint64 amount:coins sender:address forwardPayload:remainder<slice> = JettonNotification
;;

builder $JettonNotification$_store(builder build_0, (int, int, slice, slice) v) inline {
    var (v'queryId, v'amount, v'sender, v'forwardPayload) = v;
    build_0 = store_uint(build_0, 1935855772, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = build_0.store_slice(v'forwardPayload);
    return build_0;
}

cell $JettonNotification$_store_cell((int, int, slice, slice) v) inline {
    return $JettonNotification$_store(begin_cell(), v).end_cell();
}

((int, int, slice, slice)) $JettonNotification$_constructor_queryId_amount_sender_forwardPayload(int $queryId, int $amount, slice $sender, slice $forwardPayload) inline {
    return ($queryId, $amount, $sender, $forwardPayload);
}

;;
;; Type: JettonBurn
;; Header: 0x595f07bc
;; TLB: jetton_burn#595f07bc queryId:uint64 amount:coins responseDestination:address customPayload:Maybe ^cell = JettonBurn
;;

(slice, ((int, int, slice, cell))) $JettonBurn$_load_without_opcode(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    var v'responseDestination = sc_0~__tact_load_address_opt();
    var v'customPayload = sc_0~load_maybe_ref();
    return (sc_0, (v'queryId, v'amount, v'responseDestination, v'customPayload));
}

;;
;; Type: JettonBurnNotification
;; Header: 0x7bdd97de
;; TLB: jetton_burn_notification#7bdd97de queryId:uint64 amount:coins sender:address responseDestination:address = JettonBurnNotification
;;

builder $JettonBurnNotification$_store(builder build_0, (int, int, slice, slice) v) inline {
    var (v'queryId, v'amount, v'sender, v'responseDestination) = v;
    build_0 = store_uint(build_0, 2078119902, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    build_0 = build_0.store_varuint16(v'amount);
    build_0 = build_0.store_slice(v'sender);
    build_0 = __tact_store_address_opt(build_0, v'responseDestination);
    return build_0;
}

cell $JettonBurnNotification$_store_cell((int, int, slice, slice) v) inline {
    return $JettonBurnNotification$_store(begin_cell(), v).end_cell();
}

(slice, ((int, int))) $JettonBurnNotification$_load_bounced(slice sc_0) inline {
    var v'queryId = sc_0~load_uint(64);
    var v'amount = sc_0~load_varuint16();
    return (sc_0, (v'queryId, v'amount));
}

((int, int, slice, slice)) $JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination(int $queryId, int $amount, slice $sender, slice $responseDestination) inline {
    return ($queryId, $amount, $sender, $responseDestination);
}

;;
;; Type: JettonExcesses
;; Header: 0xd53276db
;; TLB: jetton_excesses#d53276db queryId:uint64 = JettonExcesses
;;

builder $JettonExcesses$_store(builder build_0, (int) v) inline {
    var (v'queryId) = v;
    build_0 = store_uint(build_0, 3576854235, 32);
    build_0 = build_0.store_uint(v'queryId, 64);
    return build_0;
}

cell $JettonExcesses$_store_cell((int) v) inline {
    return $JettonExcesses$_store(begin_cell(), v).end_cell();
}

((int)) $JettonExcesses$_constructor_queryId(int $queryId) inline {
    return ($queryId);
}

;;
;; Type: ProvideWalletBalance
;; Header: 0x7ac8d559
;; TLB: provide_wallet_balance#7ac8d559 receiver:address includeVerifyInfo:bool = ProvideWalletBalance
;;

(slice, ((slice, int))) $ProvideWalletBalance$_load_without_opcode(slice sc_0) inline {
    var v'receiver = sc_0~load_msg_addr();
    var v'includeVerifyInfo = sc_0~load_int(1);
    return (sc_0, (v'receiver, v'includeVerifyInfo));
}

;;
;; Type: VerifyInfo
;; TLB: _ owner:address minter:address code:^cell = VerifyInfo
;;

builder $VerifyInfo$_store(builder build_0, (slice, slice, cell) v) inline {
    var (v'owner, v'minter, v'code) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'minter);
    build_0 = build_0.store_ref(v'code);
    return build_0;
}

((slice, slice, cell)) $VerifyInfo$_not_null(tuple v) inline {
    throw_if(128, null?(v));
    var (slice vvv'owner, slice vvv'minter, cell vvv'code) = __tact_tuple_destroy_3(v);
    return (vvv'owner, vvv'minter, vvv'code);
}

tuple $VerifyInfo$_as_optional((slice, slice, cell) v) inline {
    var (v'owner, v'minter, v'code) = v;
    return __tact_tuple_create_3(v'owner, v'minter, v'code);
}

((slice, slice, cell)) $VerifyInfo$_constructor_minter_owner_code(slice $minter, slice $owner, cell $code) inline {
    return ($owner, $minter, $code);
}

;;
;; Type: TakeWalletBalance
;; Header: 0xca77fdc2
;; TLB: take_wallet_balance#ca77fdc2 balance:coins verifyInfo:Maybe VerifyInfo{owner:address,minter:address,code:^cell} = TakeWalletBalance
;;

builder $TakeWalletBalance$_store(builder build_0, (int, tuple) v) inline {
    var (v'balance, v'verifyInfo) = v;
    build_0 = store_uint(build_0, 3396861378, 32);
    build_0 = build_0.store_varuint16(v'balance);
    build_0 = ~ null?(v'verifyInfo) ? build_0.store_int(true, 1).$VerifyInfo$_store($VerifyInfo$_not_null(v'verifyInfo)) : build_0.store_int(false, 1);
    return build_0;
}

cell $TakeWalletBalance$_store_cell((int, tuple) v) inline {
    return $TakeWalletBalance$_store(begin_cell(), v).end_cell();
}

((int, tuple)) $TakeWalletBalance$_constructor_balance_verifyInfo(int $balance, tuple $verifyInfo) inline {
    return ($balance, $verifyInfo);
}

;;
;; Type: ClaimTON
;; Header: 0x0393b1ce
;; TLB: claim_ton#0393b1ce receiver:address = ClaimTON
;;

(slice, ((slice))) $ClaimTON$_load_without_opcode(slice sc_0) inline {
    var v'receiver = sc_0~load_msg_addr();
    return (sc_0, (v'receiver));
}

;;
;; Type: JettonWallet
;; TLB: _ owner:address minter:address balance:coins = JettonWallet
;;

builder $JettonWallet$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'owner, v'minter, v'balance) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'minter);
    build_0 = build_0.store_varuint16(v'balance);
    return build_0;
}

(slice, ((slice, slice, int))) $JettonWallet$_load(slice sc_0) inline {
    var v'owner = sc_0~load_msg_addr();
    var v'minter = sc_0~load_msg_addr();
    var v'balance = sc_0~load_varuint16();
    return (sc_0, (v'owner, v'minter, v'balance));
}

builder $JettonWallet$init$_store(builder build_0, (slice, slice, int) v) inline {
    var (v'owner, v'minter, v'balance) = v;
    build_0 = build_0.store_slice(v'owner);
    build_0 = build_0.store_slice(v'minter);
    build_0 = build_0.store_varuint16(v'balance);
    return build_0;
}

(slice, slice, int) $JettonWallet$_contract_load() impure inline {
    slice $sc = get_data().begin_parse();
    return $sc~$JettonWallet$_load();
}

() $JettonWallet$_contract_store((slice, slice, int) v) impure inline {
    builder b = begin_cell();
    b = $JettonWallet$_store(b, v);
    set_data(b.end_cell());
}

(cell, cell) $JettonWallet$_init_child(slice $owner, slice $minter, int $balance) inline {
    ;; Build init code cell

    ;; Contract Code: JettonWallet
    cell init_code = my_code();

    ;; Build init data cell

    builder b = begin_cell();
    b = $JettonWallet$init$_store(b, ($owner, $minter, $balance));
    return (init_code, b.end_cell());
}

;;
;; Contract JettonWallet functions
;;

() $global_checkEitherForwardPayload(slice $forwardPayload) impure asm """
    LDDICT // Throws 9 if Either bit = 1 and ref is not present
    SWAP
    ISNULL
    <{
        DROP
    }> PUSHCONT
    <{
        ENDS // Also throws 9 if slice is not empty
    }> PUSHCONT
    IFELSE
""";

((slice, slice, int), (int, slice, slice, cell)) $JettonWallet$_fun_get_wallet_data((slice, slice, int) $self) impure inline_ref {
    var (($self'owner, $self'minter, $self'balance)) = $self;
    var $fresh$ret_0 = $JettonWalletData$_constructor_balance_owner_minter_code($self'balance, $self'owner, $self'minter, $global_myCode());
    return (($self'owner, $self'minter, $self'balance), $fresh$ret_0);
}

;;
;; Get methods of a Contract JettonWallet
;;

_ %get_wallet_data() method_id(97026) {
    var self = $JettonWallet$_contract_load();
    var res = self~$JettonWallet$_fun_get_wallet_data();
    return $JettonWalletData$_to_external(res);
}

;;
;; Routing of a Contract JettonWallet
;;

;; message opcode reader utility: only binary receivers
;; Returns 32 bit message opcode, otherwise throws the "Invalid incoming message" exit code
(slice, int) ~load_opcode_internal(slice s) asm( -> 1 0) "32 LDUQ 130 THROWIFNOT";

() recv_internal(int msg_value, cell in_msg_cell, slice in_msg) impure {
    
    ;; Context
    var cs = in_msg_cell.begin_parse();
    cs~skip_bits(2);
    var msg_bounceable = cs~load_int(1);
    var msg_bounced = cs~load_int(1);
    slice msg_sender_addr = cs~load_msg_addr();
    __tact_context = (msg_bounceable, msg_sender_addr, msg_value, cs);
    __tact_context_sender = msg_sender_addr;
    
    ;; Load contract data
    var ($self'owner, $self'minter, $self'balance) = $JettonWallet$_contract_load();
    
    ;; Handle bounced messages
    if (msg_bounced) {
        ;; Skip 0xFFFFFFFF prefix of a bounced message
        in_msg~skip_bits(32);
        int op = 0;
        if (slice_bits(in_msg) >= 32) {
            op = in_msg~load_uint(32);
        }
        ;; Bounced handler for JettonTransferInternal message
        if (op == 0x178d4519) {
            var ($msg'queryId, $msg'amount) = in_msg~$JettonTransferInternal$_load_bounced();
            $self'balance = $self'balance + $msg'amount;
            $JettonWallet$_contract_store(($self'owner, $self'minter, $self'balance));
            return ();
        }
        
        ;; Bounced handler for JettonBurnNotification message
        if (op == 0x7bdd97de) {
            var ($msg'queryId, $msg'amount) = in_msg~$JettonBurnNotification$_load_bounced();
            $self'balance = $self'balance + $msg'amount;
            $JettonWallet$_contract_store(($self'owner, $self'minter, $self'balance));
            return ();
        }
        
        return ();
    }
    var op = in_msg~load_opcode_internal();
    ;; Receive JettonTransfer message
    if (op == 0xf8a7ea5) {
        var ($msg'queryId, $msg'amount, $msg'destination, $msg'responseDestination, $msg'customPayload, $msg'forwardTonAmount, $msg'forwardPayload) = in_msg~$JettonTransfer$_load_without_opcode();
        $global_forceBasechain($msg'destination);
        throw_unless(9215, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        $self'balance = $self'balance - $msg'amount;
        throw_unless(2366, ($self'balance >= 0));
        $global_checkEitherForwardPayload($msg'forwardPayload);
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $fwdCount = (1 + $global_sign($msg'forwardTonAmount));
        throw_unless(32113, ($ctx'value > (($msg'forwardTonAmount + ($fwdCount * $Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw)))) + ((2 * $global_getComputeFee(10500, false)) + 10000000))));
        $global_deploy($DeployParameters$_constructor_value_mode_bounce_body_init(0, 64, true, $JettonTransferInternal$_store_cell($JettonTransferInternal$_constructor_queryId_amount_sender_responseDestination_forwardTonAmount_forwardPayload($msg'queryId, $msg'amount, $self'owner, $msg'responseDestination, $msg'forwardTonAmount, $msg'forwardPayload)), $JettonWallet$_init_child($msg'destination, $self'minter, 0)));
        $JettonWallet$_contract_store(($self'owner, $self'minter, $self'balance));
        return ();
    }
    
    ;; Receive JettonTransferInternal message
    if (op == 0x178d4519) {
        var ($msg'queryId, $msg'amount, $msg'sender, $msg'responseDestination, $msg'forwardTonAmount, $msg'forwardPayload) = in_msg~$JettonTransferInternal$_load_without_opcode();
        $self'balance = $self'balance + $msg'amount;
        var ($wallet'code, $wallet'data) = $JettonWallet$_init_child($msg'sender, $self'minter, 0);
        ifnot ($StateInit$_fun_hasSameBasechainAddress(($wallet'code, $wallet'data), __tact_context_get_sender())) {
            throw_unless(9215, ( equal_slices_bits(__tact_context_get_sender(), $self'minter) ));
        }
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $msgValue = $ctx'value;
        int $tonBalanceBeforeMsg = ($global_myBalance() - $msgValue);
        if (($msg'forwardTonAmount > 0)) {
            int $fwdFee = $Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw));
            $msgValue = $msgValue - ($msg'forwardTonAmount + $fwdFee);
            $global_message($MessageParameters$_constructor_to_value_mode_bounce_body($self'owner, $msg'forwardTonAmount, 1, false, $JettonNotification$_store_cell($JettonNotification$_constructor_queryId_amount_sender_forwardPayload($msg'queryId, $msg'amount, $msg'sender, $msg'forwardPayload))));
        }
        $global_nativeReserve($global_max($tonBalanceBeforeMsg, 10000000), 2);
        if (( ((~ null?($msg'responseDestination))) ? (($msgValue > 0)) : (false) )) {
            $global_message($MessageParameters$_constructor_to_value_mode_bounce_body(__tact_not_null($msg'responseDestination), $msgValue, 130, false, $JettonExcesses$_store_cell($JettonExcesses$_constructor_queryId($msg'queryId))));
        }
        $JettonWallet$_contract_store(($self'owner, $self'minter, $self'balance));
        return ();
    }
    
    ;; Receive ProvideWalletBalance message
    if (op == 0x7ac8d559) {
        var ($msg'receiver, $msg'includeVerifyInfo) = in_msg~$ProvideWalletBalance$_load_without_opcode();
        tuple $info = null();
        if ($msg'includeVerifyInfo) {
            $info = $VerifyInfo$_as_optional($VerifyInfo$_constructor_minter_owner_code($self'minter, $self'owner, $global_myCode()));
        }
        $global_message($MessageParameters$_constructor_body_to_value_mode($TakeWalletBalance$_store_cell($TakeWalletBalance$_constructor_balance_verifyInfo($self'balance, $info)), $msg'receiver, 0, 64));
        
        return ();
    }
    
    ;; Receive JettonBurn message
    if (op == 0x595f07bc) {
        var ($msg'queryId, $msg'amount, $msg'responseDestination, $msg'customPayload) = in_msg~$JettonBurn$_load_without_opcode();
        throw_unless(9215, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        $self'balance = $self'balance - $msg'amount;
        throw_unless(2366, ($self'balance >= 0));
        var ($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw) = __tact_context_get();
        int $fwdFee = $Context$_fun_readForwardFee(($ctx'bounceable, $ctx'sender, $ctx'value, $ctx'raw));
        throw_unless(32113, ($ctx'value > ($fwdFee + (2 * $global_getComputeFee(6700, false)))));
        $global_message($MessageParameters$_constructor_to_value_mode_bounce_body($self'minter, 0, 64, true, $JettonBurnNotification$_store_cell($JettonBurnNotification$_constructor_queryId_amount_sender_responseDestination($msg'queryId, $msg'amount, $self'owner, $msg'responseDestination))));
        $JettonWallet$_contract_store(($self'owner, $self'minter, $self'balance));
        return ();
    }
    
    ;; Receive ClaimTON message
    if (op == 0x393b1ce) {
        var ($msg'receiver) = in_msg~$ClaimTON$_load_without_opcode();
        throw_unless(9215, ( equal_slices_bits($self'owner, __tact_context_get_sender()) ));
        $global_nativeReserve(10000000, 16);
        $global_message($MessageParameters$_constructor_to_value_mode($msg'receiver, 0, 128));
        
        return ();
    }
    
    ;; Throw if not handled
    throw(130);
}


() __tact_selector_hack_asm() impure asm """
@atend @ 1 {
        execute current@ context@ current!
        {
            // The core idea of this function is to save gas by avoiding unnecessary dict jump, when recv_internal/recv_external is called
            // We want to extract recv_internal/recv_external from the dict and select needed function
            // not by jumping to the needed function by it's index, but by using usual IF statements.

            }END> b> // Close previous builder, now we have a cell of previous code on top of the stack

            <{ // Start of the new code builder
                SETCP0
                // Swap the new code builder with the previous code, now we have previous code on top of the stack
                swap
                // Transform cell to slice and load first ref from the previous code, now we have the dict on top of the stack
                <s ref@

                // Extract the recv_internal from the dict
                dup 0 swap @procdictkeylen idict@ { "internal shortcut error" abort } ifnot
                swap

                // Delete the recv_internal from the dict
                0 swap @procdictkeylen idict- drop
                // Delete the recv_external from the dict (it's okay if it's not there)
                -1 swap @procdictkeylen idict- drop
                // Delete the __tact_selector_hack from the dict
                65535 swap @procdictkeylen idict- drop

                // Bring the code builder from the bottom of the stack
                // because if recv_external extraction is optional, and the number of elements on the stack is not fixed
                depth 1- roll
                // Swap with the dict from which we extracted recv_internal and (maybe) recv_external
                swap

                // Check if the dict is empty
                dup null?
                // Store a copy of this flag in the bottom of the stack
                dup depth 1- -roll
                {
                    // If the dict is empty, just drop it (it will be null if it's empty)
                    drop
                }
                {
                    // If the dict is not empty, prepare continuation to be stored in c3
                    <{
                        // Save this dict as first ref in this continuation, it will be pushed in runtime by DICTPUSHCONST
                        swap @procdictkeylen DICTPUSHCONST
                        // Jump to the needed function by it's index
                        DICTIGETJMPZ
                        // If such key is not found, throw 11 along with the key as an argument
                        11 THROWARG
                    }> PUSHCONT
                    // Store the continuation in c3
                    c3 POP
                } cond

                // Function id is on top of the (runtime) stack
                DUP IFNOTJMP:<{
                    // place recv_internal here
                    DROP swap @addop
                }>

                // Bring back the flag, indicating if the dict is empty or not from the bottom of the stack
                depth 1- roll
                {
                    // If the dict is empty, throw 11
                    11 THROWARG
                }
                {
                    // If the dict is not empty, jump to continuation from c3
                    c3 PUSH JMPX
                } cond
            }> b>
        } : }END>c
        current@ context! current!
    } does @atend !
""";

() __tact_selector_hack() method_id(65535) {
    return __tact_selector_hack_asm();
}